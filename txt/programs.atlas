
CC recursive factorial program in atlas

DEFINE factorial (n:NUM,) $ NUM {
    CC returns n! factorial

    IF [n == 0]{
        RETURN 1;
    };

    ELSE {
        NUM x = n - 1;
        NUM temp = @factorial(x,);
        RETURN  n * temp;
    };

    RETURN 1;

};

WRITE "Please enter a number below";
INPUT NUM in;

NUM answer = @factorial(in,);

WRITE answer;


CC This is a program that will search for a given pattern in a string of text


DEFINE length(s:STRING,) $ NUM {

    NUM len = 0;
    FOR [s] {
        len = len + 1;
    };

    RETURN len;
};


INPUT STRING source;
INPUT STRING target;

NUM lenOfInput =  @length(source,);

NUM it = 0;
FOR [lenOfInput] {
    STRING letter = [it..it]source;
    WRITE letter;
    it = it + 1;

};



CC Fibonacci

WRITE "How man fibonacci numbers do you want?";
INPUT NUM nums;
WRITE " ";

NUM a = 0;
NUM b = 1;
NUM c = 0;

WHILE [nums > 0] {

    WRITE a;
    c = a + b;
    a = b;
    b = c;
    nums = nums - 1;
};





// program idea but in java ...

import java.util.*;

class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Please enter the source string:");
        String source = sc.nextLine();
        System.out.print("Please enter the target pattern:");
        String target = sc.nextLine();

        int step = target.length();


        int patternCounter = 0;
        for (int i = 0; i < source.length(); i += step){

            if (step > source.length() - i){
                break;
            }

            int counter = 0;
            String snipet = "";
            for (int j = i; counter < step; j++ ){
                snipet += String.valueOf(source.charAt(j));
                counter += 1;
            }

            if (snipet.equals(target)){
                patternCounter++;
            }



        }
        System.out.println(patternCounter);

    }
}

